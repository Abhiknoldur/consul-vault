---

- name: Install Hashicorp Terraform & create instances
  hosts: localhost
  connection: local
  become: yes
  gather_facts: no

  roles:
    - { role: ansible-role-terraform-remove, become: yes, tags: [ 'never', 'remove' ] }
    - { role: ansible-role-terraform-install, become: yes, tags: [ 'terraform' ] }

  post_tasks:

    - name: Set state to absent
      set_fact:
        state: "absent"
      tags:
        - never
        - destroy

    - name: Tagged block
      block:

        - name: Get localhost's internet source IP address
          uri:
            url: http://checkip.dyndns.org
            return_content: yes
          register: checkip

        - name: "Set source IP fact ({{ checkip.content | regex_search ('(([0-9]{1,3}\\.?){4})') }})"
          set_fact:
            source_ip: "{{ checkip.content | regex_search ('(([0-9]{1,3}\\.?){4})') }}"

        # Necessary cloud provider plugins will not be available before running intial "terraform init"
        # Terraform documentation says it is safe to run "terraform init" at any time
        # Note: Fails if state files created from newer versions of terraform are found
        - name: Initialise terraform
          command: "terraform init"
          args:
            chdir: "../terraform_files"
          register: init_terraform

        - name: "Terraform {{ (state | default('present') == 'present') | ternary('create', 'destroy') }} environment"
          environment:
            TF_VAR_do_api_token: "{{ lookup('env', 'DO_API_TOKEN') }}"
            TF_VAR_do_ssh_keys: "{{ lookup('env', 'DO_SSH_KEYS') }}"
            TF_VAR_do_source_ip: "{{ source_ip }}"
          terraform:
            state: "{{ state | default('present') }}"
            project_path: "../terraform_files"
          register: terraform_result

        - name: Show contents of terraform_result
          debug:
            var: terraform_result.stdout_lines

        - name: Show contents of terraform_result ip_address
          debug:
            var: item
          with_items:
            - "{{ terraform_result['outputs']['haproxy_public_ips']['value'] }}"
            - "{{ terraform_result['outputs']['haproxy_private_ips']['value'] }}"
            - "{{ terraform_result['outputs']['vault_public_ips']['value'] }}"
            - "{{ terraform_result['outputs']['vault_private_ips']['value'] }}"
            - "{{ terraform_result['outputs']['consul_public_ips']['value'] }}"
            - "{{ terraform_result['outputs']['consul_private_ips']['value'] }}"
          when:
            - state | default('present') == 'present'

        - name: Refresh dynamic inventory
          meta: refresh_inventory

      tags:
       - terraform
       - destroy

- name: Wait for host connectivity
  hosts: all
  gather_facts: no

  tasks:

    - name: Conditional block
      block:

        - name: Wait for port 22 to become open
          wait_for:
            port: 22
            host: '{{ (ansible_ssh_host | default(ansible_host)) | default(inventory_hostname) }}'
            delay: 10
          delegate_to: localhost

        - name: Pause additional 10 seconds
          pause:
            seconds: 10

      when:
        - hostvars['localhost']['terraform_result']['changed'] | bool
        - hostvars['localhost']['state'] | default('present') == 'present'
      tags:
       - terraform
       - destroy

