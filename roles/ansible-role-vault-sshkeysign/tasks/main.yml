---
# tasks file for ansible-role-vault-sshkeysign

- name: Retrieve keys locally
  set_fact:
    vault_keys: "{{ vault_keys | default({}) | combine( { item['key']: lookup('file', vault_keysdir | default('~') + '/' +  item['key'] + '/' + vault_keysfile) | from_json } ) }}"
  loop: "{{ inv_vault | dict2items }}"
  become: no
  no_log: yes
  delegate_to: localhost
  run_once: yes

- name: Enable SSH engine at {{ ssh_client }}
  uri:
    url: "https://{{ vault_addr }}:{{ vault_port }}/v1/sys/mounts/{{ ssh_client }}"
    validate_certs: no
    method: POST
    headers:
      X-Vault-Token: "{{ vault_keys[inventory_dir | basename]['root_token'] }}"
    body: "{{ lookup('template','ssh_secrets_params.json.j2') }}"
    body_format: json
    return_content: yes
    status_code: 204
  loop: "{{ inv_vault | dict2items }}"
  when:
    - inventory_dir | basename == item['key']
    - inventory_hostname == item['value'][0]
  become: no
  register: result
  # Don't fail if "existing mount at" message appears
  failed_when:
    - result['status'] not in [204]
    - "'existing mount at ' not in result['content']"

- name: Generate CA for {{ ssh_client }}
  uri:
    url: "https://{{ vault_addr }}:{{ vault_port }}/v1/{{ ssh_client }}/config/ca"
    validate_certs: no
    method: POST
    headers:
      X-Vault-Token: "{{ vault_keys[inventory_dir | basename]['root_token'] }}"
    body: "{{ lookup('template','ca_config.json.j2') }}"
    body_format: json
    return_content: yes
    status_code: 200
  loop: "{{ inv_vault | dict2items }}"
  when:
    - inventory_dir | basename == item['key']
    - inventory_hostname == item['value'][0]
  become: no
  register: result
  # Don't fail if "keys are already configured; delete them before reconfiguring" message appears
  failed_when:
    - result['status'] not in [200]
    - "'keys are already configured; delete them before reconfiguring' not in result['content']"

- name: Create role for signing client public SSH keys {{ sshrole_name }}
  uri:
    url: "https://{{ vault_addr }}:{{ vault_port }}/v1/{{ ssh_client }}/roles/ssh-client-role"
    validate_certs: no
    method: POST
    headers:
      X-Vault-Token: "{{ vault_keys[inventory_dir | basename]['root_token'] }}"
    body: "{{ lookup('template','sshrole_params.json.j2') }}"
    body_format: json
    return_content: yes
    status_code: 204
  loop: "{{ inv_vault | dict2items }}"
  when:
    - inventory_dir | basename == item['key']
    - inventory_hostname == item['value'][0]
  become: no
  register: result
  # Don't fail if "path is already in use" message appears
  failed_when:
    - result['status'] not in [204]
    - "'path is already in use' not in result['content']"

- name: Enable SSH engine at {{ ssh_host }}
  uri:
    url: "https://{{ vault_addr }}:{{ vault_port }}/v1/sys/mounts/{{ ssh_host }}"
    validate_certs: no
    method: POST
    headers:
      X-Vault-Token: "{{ vault_keys[inventory_dir | basename]['root_token'] }}"
    body: "{{ lookup('template','ssh_secrets_params.json.j2') }}"
    body_format: json
    return_content: yes
    status_code: 204
  loop: "{{ inv_vault | dict2items }}"
  when:
    - inventory_dir | basename == item['key']
    - inventory_hostname == item['value'][0]
  become: no
  register: result
  # Don't fail if "existing mount at" message appears
  failed_when:
    - result['status'] not in [204]
    - "'existing mount at ' not in result['content']"

- name: Tune SSH engine at {{ ssh_host }}
  uri:
    url: "https://{{ vault_addr }}:{{ vault_port }}/v1/sys/mounts/{{ ssh_host }}/tune"
    validate_certs: no
    method: POST
    headers:
      X-Vault-Token: "{{ vault_keys[inventory_dir | basename]['root_token'] }}"
    body: "{{ lookup('template','ssh_host_tune.json.j2') }}"
    body_format: json
    return_content: yes
    status_code: 204
  loop: "{{ inv_vault | dict2items }}"
  when:
    - inventory_dir | basename == item['key']
    - inventory_hostname == item['value'][0]
  become: no
  register: result
  # Don't fail if "existing mount at" message appears
  failed_when:
    - result['status'] not in [204]
    - "'existing mount at ' not in result['content']"

- name: Generate CA for {{ ssh_host }}
  uri:
    url: "https://{{ vault_addr }}:{{ vault_port }}/v1/{{ ssh_host }}/config/ca"
    validate_certs: no
    method: POST
    headers:
      X-Vault-Token: "{{ vault_keys[inventory_dir | basename]['root_token'] }}"
    body: "{{ lookup('template','ca_config.json.j2') }}"
    body_format: json
    return_content: yes
    status_code: 200
  loop: "{{ inv_vault | dict2items }}"
  when:
    - inventory_dir | basename == item['key']
    - inventory_hostname == item['value'][0]
  become: no
  register: result
  # Don't fail if "keys are already configured; delete them before reconfiguring" message appears
  failed_when:
    - result['status'] not in [200]
    - "'keys are already configured; delete them before reconfiguring' not in result['content']"

- name: Create role for signing host public SSH keys {{ hostrole_name }}
  uri:
    url: "https://{{ vault_addr }}:{{ vault_port }}/v1/{{ ssh_host }}/roles/ssh-host-role"
    validate_certs: no
    method: POST
    headers:
      X-Vault-Token: "{{ vault_keys[inventory_dir | basename]['root_token'] }}"
    body: "{{ lookup('template','hostrole_params.json.j2') }}"
    body_format: json
    return_content: yes
    status_code: 204
  loop: "{{ inv_vault | dict2items }}"
  when:
    - inventory_dir | basename == item['key']
    - inventory_hostname == item['value'][0]
  become: no
  register: result
  # Don't fail if "path is already in use" message appears
  failed_when:
    - result['status'] not in [204]
    - "'path is already in use' not in result['content']"

