---
# tasks file for ansible-role-vault-configure

- name: Create audit log directory
  file:
    path: "{{ audit_path }}"
    owner: "{{ vault_user }}"
    group: "{{ vault_group }}"
    mode: 0750
    state: directory

- name: Retrieve keys locally
  set_fact:
    vault_keys: "{{ vault_keys | default({}) | combine( { item['key']: lookup('file', vault_keysdir | default('~') + '/' +  item['key'] + '/' + vault_keysfile) | from_json } ) }}"
  loop: "{{ inv_vault | dict2items }}"
  become: no
  no_log: yes
  delegate_to: localhost
  run_once: yes

- name: Enable auditing to file
  uri:
    url: "https://{{ vault_addr }}:{{ vault_port }}/v1/sys/audit/ansible"
    validate_certs: no
    method: PUT
    headers:
      X-Vault-Token: "{{ vault_keys[inventory_dir | basename]['root_token'] }}"
    body: "{{ lookup('template','audit_params.j2') }}"
    body_format: json
    return_content: yes
    status_code: 204
  become: no
  register: result
  # Don't fail if "path is already in use" message appears
  failed_when:
    - result['status'] not in [204]
    - "'path already in use' not in result['content']"

- name: Create admin policy
  uri:
    url: "https://{{ vault_addr }}:{{ vault_port }}/v1/sys/policy/admin"
    validate_certs: no
    method: PUT
    headers:
      X-Vault-Token: "{{ vault_keys[inventory_dir | basename]['root_token'] }}"
    # This simple line took me 2 days to get working, I felt that needed mentioning!
    body: { "policy": "{{ lookup('file','policy-admin.hcl') }}" }
    body_format: json
    return_content: yes
    status_code: 204
  loop: "{{ inv_vault | dict2items }}"
  when:
    - inventory_dir | basename == item['key']
    - inventory_hostname == item['value'][0]
  become: no

- name: Create provisioner policy
  uri:
    url: "https://{{ vault_addr }}:{{ vault_port }}/v1/sys/policy/provisioner"
    validate_certs: no
    method: PUT
    headers:
      X-Vault-Token: "{{ vault_keys[inventory_dir | basename]['root_token'] }}"
    body: { "policy": "{{ lookup('file','policy-provisioner.hcl') }}" }
    body_format: json
    return_content: yes
    status_code: 204
  loop: "{{ inv_vault | dict2items }}"
  when:
    - inventory_dir | basename == item['key']
    - inventory_hostname == item['value'][0]
  become: no

- name: Create and capture admin token
  uri:
    url: "https://{{ vault_addr }}:{{ vault_port }}/v1/auth/token/create"
    validate_certs: no
    method: POST
    headers:
      X-Vault-Token: "{{ vault_keys[inventory_dir | basename]['root_token'] }}"
    body: '{ "policies": "admin" }'
    body_format: json
    return_content: yes
    status_code: 200
  loop: "{{ inv_vault | dict2items }}"
  when:
    - inventory_dir | basename == item['key']
    - inventory_hostname == item['value'][0]
  become: no
  register: admin_token

- name: Create and capture provisioner token
  uri:
    url: "https://{{ vault_addr }}:{{ vault_port }}/v1/auth/token/create"
    validate_certs: no
    method: POST
    headers:
      # Use the newly created admin token to create the provisioner policy
      X-Vault-Token: "{{ admin_token['results'] | selectattr('json', 'defined') | map(attribute='json.auth.client_token') | first }}"
    body: '{ "policies": "provisioner" }'
    body_format: json
    return_content: yes
    status_code: 200
  loop: "{{ inv_vault | dict2items }}"
  when:
    - inventory_dir | basename == item['key']
    - inventory_hostname == item['value'][0]
  become: no
  register: provisioner_token

- name: Save admin token locally
  copy:
    content: "{{ admin_token['results'] | selectattr('json', 'defined') | map(attribute='json') | first | to_nice_json(indent=2) }}"
    dest: "{{ vault_keysdir | default('~') }}/{{ item['key'] }}/{{ vault_admintokenfile }}"
    mode: 0600
  delegate_to: localhost
  become: no
  # TODO: Remove comment
  #no_log: yes
  loop: "{{ inv_vault | dict2items }}"
  when:
    - inventory_dir | basename == item['key']
    - inventory_hostname == item['value'][0]

- name: Save provisioner token locally
  copy:
    content: "{{ provisioner_token['results'] | selectattr('json', 'defined') | map(attribute='json') | first | to_nice_json(indent=2) }}"
    dest: "{{ vault_keysdir | default('~') }}/{{ item['key'] }}/{{ vault_provisionertokenfile }}"
    mode: 0600
  delegate_to: localhost
  become: no
  # TODO: Remove comment
  #no_log: yes
  loop: "{{ inv_vault | dict2items }}"
  when:
    - inventory_dir | basename == item['key']
    - inventory_hostname == item['value'][0]

